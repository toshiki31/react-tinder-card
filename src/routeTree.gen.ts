/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as BannerIndexImport } from './routes/banner/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as AboutResultIndexImport } from './routes/about/result/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BannerIndexRoute = BannerIndexImport.update({
  id: '/banner/',
  path: '/banner/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const AboutResultIndexRoute = AboutResultIndexImport.update({
  id: '/about/result/',
  path: '/about/result/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/banner/': {
      id: '/banner/'
      path: '/banner'
      fullPath: '/banner'
      preLoaderRoute: typeof BannerIndexImport
      parentRoute: typeof rootRoute
    }
    '/about/result/': {
      id: '/about/result/'
      path: '/about/result'
      fullPath: '/about/result'
      preLoaderRoute: typeof AboutResultIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutIndexRoute
  '/banner': typeof BannerIndexRoute
  '/about/result': typeof AboutResultIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutIndexRoute
  '/banner': typeof BannerIndexRoute
  '/about/result': typeof AboutResultIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about/': typeof AboutIndexRoute
  '/banner/': typeof BannerIndexRoute
  '/about/result/': typeof AboutResultIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/banner' | '/about/result'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/banner' | '/about/result'
  id: '__root__' | '/' | '/about/' | '/banner/' | '/about/result/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutIndexRoute: typeof AboutIndexRoute
  BannerIndexRoute: typeof BannerIndexRoute
  AboutResultIndexRoute: typeof AboutResultIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutIndexRoute: AboutIndexRoute,
  BannerIndexRoute: BannerIndexRoute,
  AboutResultIndexRoute: AboutResultIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about/",
        "/banner/",
        "/about/result/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/banner/": {
      "filePath": "banner/index.tsx"
    },
    "/about/result/": {
      "filePath": "about/result/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
